{"version":3,"sources":["../src/app.js"],"names":["production","process","env","NODE_ENV","require","config","app","server","corsOptions","origin","CORSwhitelist","credentials","use","contentSecurityPolicy","undefined","express","json","urlencoded","extended","applyMiddleware","path","cors","indexRouter","req","res","next","err","locals","message","error","get","status","listen","port","console","log"],"mappings":";;;;;;;;;AAQA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AAlBA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA,IAAMA,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA5C,C,CAEA;;AACA,IAAI,CAACH,UAAL,EAAiBI,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;AAEjB,IAAMC,GAAG,GAAG,0BAAZ;AAEA,IAAMC,MAAM,GAAG,+BAAf;AAEA,IAAMC,WAAW,GAAG;AAAEC,EAAAA,MAAM,EAAEC,qBAAV;AAAyBC,EAAAA,WAAW,EAAE;AAAtC,CAApB;AAEAL,GAAG,CAACM,GAAJ,CAAQ,sBAAKJ,WAAL,CAAR,E,CACA;;AACAF,GAAG,CAACM,GAAJ,CAAQ,wBAAO;AAAEC,EAAAA,qBAAqB,EAAEb,UAAU,GAAGc,SAAH,GAAe;AAAlD,CAAP,CAAR;AACAR,GAAG,CAACM,GAAJ,CAAQ,8BAAR;AACAN,GAAG,CAACM,GAAJ,CAAQG,oBAAQC,IAAR,EAAR;AACAV,GAAG,CAACM,GAAJ,CAAQG,oBAAQE,UAAR,CAAmB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAnB,CAAR;AACAZ,GAAG,CAACM,GAAJ,CAAQ,+BAAR;AACAN,GAAG,CAACM,GAAJ,CAAQ,wBAAOZ,UAAU,GAAG,UAAH,GAAgB,KAAjC,CAAR;AAEAO,MAAM,CAACY,eAAP,CAAuB;AAAEb,EAAAA,GAAG,EAAHA,GAAF;AAAOc,EAAAA,IAAI,EAAE,MAAb;AAAqBC,EAAAA,IAAI,EAAEb;AAA3B,CAAvB;AAEAF,GAAG,CAACM,GAAJ,CAAQ,GAAR,EAAaU,kBAAb,E,CAEA;;AACAhB,GAAG,CAACM,GAAJ,CAAQ,UAACW,GAAD,EAAMC,GAAN,EAAWC,IAAX;AAAA,SAAoBA,IAAI,CAAC,4BAAY,GAAZ,CAAD,CAAxB;AAAA,CAAR,E,CAEA;;AACAnB,GAAG,CAACM,GAAJ,CAAQ,UAACc,GAAD,EAAMH,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AAC/B;AACAD,EAAAA,GAAG,CAACG,MAAJ,CAAWC,OAAX,GAAqBF,GAAG,CAACE,OAAzB;AACAJ,EAAAA,GAAG,CAACG,MAAJ,CAAWE,KAAX,GAAmBN,GAAG,CAACjB,GAAJ,CAAQwB,GAAR,CAAY,KAAZ,MAAuB,aAAvB,GAAuCJ,GAAvC,GAA6C,EAAhE,CAH+B,CAK/B;;AACAF,EAAAA,GAAG,CAACO,MAAJ,CAAWL,GAAG,CAACK,MAAJ,IAAc,GAAzB;AACAP,EAAAA,GAAG,CAACR,IAAJ,CAAS;AAAEY,IAAAA,OAAO,EAAEF,GAAG,CAACE,OAAf;AAAwBC,IAAAA,KAAK,EAAEH;AAA/B,GAAT;AACD,CARD,E,CAUA;;AACA,IAAI1B,UAAJ,EAAgB;AACdM,EAAAA,GAAG,CAAC0B,MAAJ,CAAW;AAAEC,IAAAA,IAAI,EAAJA;AAAF,GAAX,EAAqB,UAAAP,GAAG,EAAI;AAC1B,QAAIA,GAAJ,EAAS,MAAMA,GAAN;AAETQ,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,YAArC;AACD,GAJD;AAKD;;eAEc3B,G","sourcesContent":["/*\r\n\r\n! must re-build server before pushing to vercel\r\n? and start script\r\n* npm run build\r\n\r\n*/\r\n\r\nimport express from 'express';\r\nimport cors from 'cors';\r\nimport helmet from 'helmet';\r\nimport compression from 'compression';\r\nimport cookieParser from 'cookie-parser';\r\nimport logger from 'morgan';\r\nimport createError from 'http-errors';\r\n\r\nimport { port, CORSwhitelist } from './config.js';\r\nimport apolloServer from './graphql/apolloServer';\r\nimport indexRouter from './rest/routes';\r\n\r\nconst production = process.env.NODE_ENV === 'production';\r\n\r\n// in production, env vars are defined on the host\r\nif (!production) require('dotenv').config();\r\n\r\nconst app = express();\r\n\r\nconst server = apolloServer();\r\n\r\nconst corsOptions = { origin: CORSwhitelist, credentials: true };\r\n\r\napp.use(cors(corsOptions));\r\n// https://github.com/graphql/graphql-playground/issues/1283\r\napp.use(helmet({ contentSecurityPolicy: production ? undefined : false }));\r\napp.use(compression());\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\napp.use(logger(production ? 'combined' : 'dev'));\r\n\r\nserver.applyMiddleware({ app, path: '/gql', cors: corsOptions });\r\n\r\napp.use('/', indexRouter);\r\n\r\n// catch 404 and forward to error handler\r\napp.use((req, res, next) => next(createError(404)));\r\n\r\n// error handler\r\napp.use((err, req, res, next) => {\r\n  // set locals, only providing error in development\r\n  res.locals.message = err.message;\r\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\r\n\r\n  // return the error\r\n  res.status(err.status || 500);\r\n  res.json({ message: err.message, error: err });\r\n});\r\n\r\n// ./bin/www.js file doesn't work on vercel\r\nif (production) {\r\n  app.listen({ port }, err => {\r\n    if (err) throw err;\r\n\r\n    console.log('Server ready on port:', port);\r\n  });\r\n}\r\n\r\nexport default app;\r\n"],"file":"app.js"}