{"version":3,"sources":["../../src/utils/validation.js"],"names":["isEmailWellFormed","email","notString","UserInputError","isvalid","isEmail","validate","isPasswordWellFormed","password","tooShort","length","passwordMinLength","tooLong","passwordMaxLength","hasUpperCase","match","hasLowerCase","hasNumber","validatePassword","inputPassword","hashedPassword","bcrypt","compare","isCorrectPass"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;AAEO,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,KAAK,EAAI;AACxC,MAAMC,SAAS,GAAG,OAAOD,KAAP,KAAiB,QAAnC;AAEA,MAAIC,SAAJ,EAAe,MAAM,IAAIC,mCAAJ,CAAmB,uBAAnB,CAAN;;AAEf,MAAMC,OAAO,GAAGC,oBAAQC,QAAR,CAAiBL,KAAjB,CAAhB;;AAEA,MAAI,CAACG,OAAL,EACE,MAAM,IAAID,mCAAJ,CAAmB,sCAAnB,CAAN;AACH,CATM;AAWP;;;;;AAEO,IAAMI,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAC,QAAQ,EAAI;AAC9C;AACF;AACA;AACA;AACA;AACA;AACA;AAEE,MAAMN,SAAS,GAAG,OAAOM,QAAP,KAAoB,QAAtC;AACA,MAAIN,SAAJ,EAAe,MAAM,IAAIC,mCAAJ,CAAmB,kBAAnB,CAAN;AAEf,MAAMM,QAAQ,GAAGD,QAAQ,CAACE,MAAT,GAAkBC,yBAAnC;AACA,MAAIF,QAAJ,EACE,MAAM,IAAIN,mCAAJ,uCAC2BQ,yBAD3B,iBAAN;AAIF,MAAMC,OAAO,GAAGJ,QAAQ,CAACE,MAAT,GAAkBG,yBAAlC;AACA,MAAID,OAAJ,EACE,MAAM,IAAIT,mCAAJ,2CAC+BU,yBAD/B,iBAAN;AAIF,MAAMC,YAAY,GAAGN,QAAQ,CAACO,KAAT,CAAe,QAAf,CAArB;AACA,MAAI,CAACD,YAAL,EACE,MAAM,IAAIX,mCAAJ,CAAmB,2CAAnB,CAAN;AAEF,MAAMa,YAAY,GAAGR,QAAQ,CAACO,KAAT,CAAe,QAAf,CAArB;AACA,MAAI,CAACC,YAAL,EACE,MAAM,IAAIb,mCAAJ,CAAmB,0CAAnB,CAAN;AAEF,MAAMc,SAAS,GAAGT,QAAQ,CAACO,KAAT,CAAe,QAAf,CAAlB;AACA,MAAI,CAACE,SAAL,EAAgB,MAAM,IAAId,mCAAJ,CAAmB,gCAAnB,CAAN;AACjB,CAlCM;;;;AAoCA,IAAMe,gBAAgB;AAAA,2FAAG,iBAAOC,aAAP,EAAsBC,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGFC,qBAAOC,OAAP,CAAeH,aAAf,EAA8BC,cAA9B,CAHE;;AAAA;AAGxBG,YAAAA,aAHwB;;AAAA,gBAKzBA,aALyB;AAAA;AAAA;AAAA;;AAAA,kBAKJ,IAAIpB,mCAAJ,CAAmB,0BAAnB,CALI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBe,gBAAgB;AAAA;AAAA;AAAA,GAAtB","sourcesContent":["import { UserInputError } from 'apollo-server-express';\r\nimport bcrypt from 'bcryptjs';\r\nimport isEmail from 'isemail';\r\nimport { passwordMinLength, passwordMaxLength } from '../config';\r\n\r\n/* Email */\r\n\r\nexport const isEmailWellFormed = email => {\r\n  const notString = typeof email !== 'string';\r\n\r\n  if (notString) throw new UserInputError('Invalid email address');\r\n\r\n  const isvalid = isEmail.validate(email);\r\n\r\n  if (!isvalid)\r\n    throw new UserInputError('Please provide a valid email address');\r\n};\r\n\r\n/* Password */\r\n\r\nexport const isPasswordWellFormed = password => {\r\n  /*\r\n  https://regexr.com/3bfsi\r\n  /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/gm\r\n  - At least 8 characters\r\n  - Must contain at least 1 uppercase letter, 1 lowercase letter, and 1 number\r\n  - Can contain special characters\r\n  */\r\n\r\n  const notString = typeof password !== 'string';\r\n  if (notString) throw new UserInputError('Invalid password');\r\n\r\n  const tooShort = password.length < passwordMinLength;\r\n  if (tooShort)\r\n    throw new UserInputError(\r\n      `Password must have at least ${passwordMinLength} characters`\r\n    );\r\n\r\n  const tooLong = password.length > passwordMaxLength;\r\n  if (tooLong)\r\n    throw new UserInputError(\r\n      `Password must have no more than ${passwordMaxLength} characters`\r\n    );\r\n\r\n  const hasUpperCase = password.match(/[A-Z]/g);\r\n  if (!hasUpperCase)\r\n    throw new UserInputError('Password must contain an uppercase letter');\r\n\r\n  const hasLowerCase = password.match(/[a-z]/g);\r\n  if (!hasLowerCase)\r\n    throw new UserInputError('Password must contain a lowercase letter');\r\n\r\n  const hasNumber = password.match(/[0-9]/g);\r\n  if (!hasNumber) throw new UserInputError('Password must contain a number');\r\n};\r\n\r\nexport const validatePassword = async (inputPassword, hashedPassword) => {\r\n  // const valid = await argon2.verify(hashedPassword, inputPassword);\r\n\r\n  const isCorrectPass = await bcrypt.compare(inputPassword, hashedPassword);\r\n\r\n  if (!isCorrectPass) throw new UserInputError('login.invalidCredentials');\r\n};\r\n"],"file":"validation.js"}