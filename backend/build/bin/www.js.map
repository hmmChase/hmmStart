{"version":3,"sources":["../../src/bin/www.js"],"names":["debug","port","normalizePort","process","env","PORT","app","set","server","http","createServer","listen","on","onError","onListening","val","parseInt","isNaN","error","syscall","bind","code","console","exit","addr","address","log"],"mappings":"AAAA;;AAEA;AACA;AACA;;;;;AAEA;;AACA;;AAEA;;AAEA,IAAMA,KAAK,GAAG,uBAAM,iBAAN,CAAd;AAEA;AACA;AACA;;AAEA,IAAMC,IAAI,GAAGC,aAAa,CAACC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,MAArB,CAA1B;;AACAC,gBAAIC,GAAJ,CAAQ,MAAR,EAAgBN,IAAhB;AAEA;AACA;AACA;;;AAEA,IAAMO,MAAM,GAAGC,iBAAKC,YAAL,CAAkBJ,eAAlB,CAAf;AAEA;AACA;AACA;;;AAEAE,MAAM,CAACG,MAAP,CAAcV,IAAd;AACAO,MAAM,CAACI,EAAP,CAAU,OAAV,EAAmBC,OAAnB;AACAL,MAAM,CAACI,EAAP,CAAU,WAAV,EAAuBE,WAAvB;AAEA;AACA;AACA;;AAEA,SAASZ,aAAT,CAAuBa,GAAvB,EAA4B;AAC1B,MAAMd,IAAI,GAAGe,QAAQ,CAACD,GAAD,EAAM,EAAN,CAArB,CAD0B,CAG1B;;AACA,MAAIE,KAAK,CAAChB,IAAD,CAAT,EAAiB,OAAOc,GAAP,CAJS,CAM1B;;AACA,MAAId,IAAI,IAAI,CAAZ,EAAe,OAAOA,IAAP;AAEf,SAAO,KAAP;AACD;AAED;AACA;AACA;;;AAEA,SAASY,OAAT,CAAiBK,KAAjB,EAAwB;AACtB,MAAIA,KAAK,CAACC,OAAN,KAAkB,QAAtB,EAAgC,MAAMD,KAAN;AAEhC,MAAME,IAAI,GAAG,OAAOnB,IAAP,KAAgB,QAAhB,GAA2B,UAAUA,IAArC,GAA4C,UAAUA,IAAnE,CAHsB,CAKtB;;AACA,UAAQiB,KAAK,CAACG,IAAd;AACE,SAAK,QAAL;AACEC,MAAAA,OAAO,CAACJ,KAAR,CAAcE,IAAI,GAAG,+BAArB;AACAjB,MAAAA,OAAO,CAACoB,IAAR,CAAa,CAAb;AACA;;AAEF,SAAK,YAAL;AACED,MAAAA,OAAO,CAACJ,KAAR,CAAcE,IAAI,GAAG,oBAArB;AACAjB,MAAAA,OAAO,CAACoB,IAAR,CAAa,CAAb;AACA;;AAEF;AACE,YAAML,KAAN;AAZJ;AAcD;AAED;AACA;AACA;;;AAEA,SAASJ,WAAT,GAAuB;AACrB,MAAMU,IAAI,GAAGhB,MAAM,CAACiB,OAAP,EAAb;AACA,MAAML,IAAI,GAAG,OAAOI,IAAP,KAAgB,QAAhB,GAA2B,UAAUA,IAArC,GAA4C,UAAUA,IAAI,CAACvB,IAAxE;AAEAqB,EAAAA,OAAO,CAACI,GAAR,CAAY,mCAAmCF,IAAI,CAACvB,IAApD;AAEAD,EAAAA,KAAK,CAAC,kBAAkBoB,IAAnB,CAAL;AACD","sourcesContent":["#!/usr/bin/env node\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nimport Debug from 'debug';\r\nimport http from 'http';\r\n\r\nimport app from '../app';\r\n\r\nconst debug = Debug('hmmStart:server');\r\n\r\n/**\r\n * Get port from environment and store in Express.\r\n */\r\n\r\nconst port = normalizePort(process.env.PORT || '3000');\r\napp.set('port', port);\r\n\r\n/**\r\n * Create HTTP server.\r\n */\r\n\r\nconst server = http.createServer(app);\r\n\r\n/**\r\n * Listen on provided port, on all network interfaces.\r\n */\r\n\r\nserver.listen(port);\r\nserver.on('error', onError);\r\nserver.on('listening', onListening);\r\n\r\n/**\r\n * Normalize a port into a number, string, or false.\r\n */\r\n\r\nfunction normalizePort(val) {\r\n  const port = parseInt(val, 10);\r\n\r\n  // named pipe\r\n  if (isNaN(port)) return val;\r\n\r\n  // port number\r\n  if (port >= 0) return port;\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * Event listener for HTTP server \"error\" event.\r\n */\r\n\r\nfunction onError(error) {\r\n  if (error.syscall !== 'listen') throw error;\r\n\r\n  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;\r\n\r\n  // handle specific listen errors with friendly messages\r\n  switch (error.code) {\r\n    case 'EACCES':\r\n      console.error(bind + ' requires elevated privileges');\r\n      process.exit(1);\r\n      break;\r\n\r\n    case 'EADDRINUSE':\r\n      console.error(bind + ' is already in use');\r\n      process.exit(1);\r\n      break;\r\n\r\n    default:\r\n      throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Event listener for HTTP server \"listening\" event.\r\n */\r\n\r\nfunction onListening() {\r\n  const addr = server.address();\r\n  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;\r\n\r\n  console.log('Listening on http://localhost:' + addr.port);\r\n\r\n  debug('Listening on ' + bind);\r\n}\r\n"],"file":"www.js"}