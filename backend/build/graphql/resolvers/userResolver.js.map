{"version":3,"sources":["../../../src/graphql/resolvers/userResolver.js"],"names":["Query","user","parent","args","ctx","info","id","numId","Number","AuthenticationError","prisma","findUnique","where","userRecord","clientUserData","console","log","users","findMany","userRecords","clientUsersData","map","currentUser","accessToken","payload","userId","res","cookie","COOKIE_CONFIG","Mutation","logIn","email","password","isEmailWellFormed","isPasswordWellFormed"],"mappings":"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","sourcesContent":["import { AuthenticationError } from 'apollo-server-express';\r\n\r\nimport { createAccessToken, verifyAccessToken } from '../../utils/accessToken';\r\nimport userClientCleaner from '../../utils/userClientCleaner';\r\nimport { COOKIE_CONFIG } from '../../config';\r\nimport {\r\n  isEmailWellFormed,\r\n  isPasswordWellFormed,\r\n  validatePassword\r\n} from '../../utils/validation';\r\n\r\nexport default {\r\n  Query: {\r\n    // Return user matching id\r\n    user: async (parent, args, ctx, info) => {\r\n      const { id } = args;\r\n\r\n      // Convert string to number\r\n      const numId = Number(id);\r\n\r\n      // Check if missing args\r\n      if (!id) throw new AuthenticationError('error.missingArgument');\r\n\r\n      // Check if id is syntactically valid\r\n      if (typeof numId !== 'number')\r\n        throw new AuthenticationError('error.invalidArgument');\r\n\r\n      try {\r\n        // Find user matching userId\r\n        const userRecord = await ctx.prisma.user.findUnique({\r\n          where: { id: numId }\r\n        });\r\n\r\n        // Clean user data for client\r\n        const clientUserData = userClientCleaner(userRecord);\r\n\r\n        // Return user data\r\n        return clientUserData;\r\n      } catch (error) {\r\n        console.log('user.user error: ', error);\r\n\r\n        return {};\r\n      }\r\n    },\r\n\r\n    // Return all users\r\n    users: async (parent, args, ctx, info) => {\r\n      try {\r\n        // Find all users\r\n        const userRecords = await ctx.prisma.user.findMany();\r\n\r\n        // Clean users data for client\r\n        const clientUsersData = userRecords.map(user =>\r\n          userClientCleaner(user)\r\n        );\r\n\r\n        // Return users data\r\n        return clientUsersData;\r\n      } catch (error) {\r\n        console.log('user.users error: ', error);\r\n\r\n        return {};\r\n      }\r\n    },\r\n\r\n    // Return authenticated user\r\n    currentUser: async (parent, args, ctx, info) => {\r\n      // If no access token, return error\r\n      if (!ctx.accessToken)\r\n        return new AuthenticationError('user.invalidCredentials');\r\n\r\n      // Verify access token and decode payload\r\n      const payload = verifyAccessToken(ctx.accessToken);\r\n\r\n      try {\r\n        // Find user matching userId\r\n        const userRecord = await ctx.prisma.user.findUnique({\r\n          where: { id: payload.userId }\r\n        });\r\n\r\n        // If no user found, return error\r\n        if (!userRecord) return AuthenticationError('user.notFound');\r\n\r\n        // Create new access token\r\n        const accessToken = createAccessToken(userRecord.id);\r\n\r\n        // Send back new access token\r\n        ctx.res.cookie('at', accessToken, COOKIE_CONFIG);\r\n\r\n        // Clean user data for client\r\n        const clientUserData = userClientCleaner(userRecord);\r\n\r\n        // Return user data\r\n        return clientUserData;\r\n      } catch (error) {\r\n        console.log('user.currentUser error: ', error);\r\n\r\n        return {};\r\n      }\r\n    }\r\n  },\r\n\r\n  Mutation: {\r\n    logIn: async (parent, args, ctx, info) => {\r\n      const { email, password } = args;\r\n\r\n      // Check if missing args\r\n      if (!email || !password)\r\n        throw new AuthenticationError('login.missingCredentials');\r\n\r\n      // Check if email and password are syntactically valid\r\n      if (!isEmailWellFormed || !isPasswordWellFormed)\r\n        throw new AuthenticationError('login.invalidCredentials');\r\n\r\n      try {\r\n        // Find user matching email\r\n        const userRecord = await ctx.prisma.user.findUnique({\r\n          where: { email }\r\n        });\r\n\r\n        console.log('userRecord:', userRecord);\r\n\r\n        // If user not found, return error\r\n        if (!userRecord)\r\n          throw new AuthenticationError('login.invalidCredentials');\r\n\r\n        // Check if password input matches users password\r\n        validatePassword(args.password, userRecord.password);\r\n\r\n        // Create access token\r\n        const accessToken = createAccessToken(userRecord.id);\r\n\r\n        console.log('accessToken:', accessToken);\r\n\r\n        // Send back new access token\r\n        ctx.res.cookie('at', accessToken, COOKIE_CONFIG);\r\n\r\n        // Clean user data for client\r\n        const clientUserData = userClientCleaner(userRecord);\r\n\r\n        // Return user data\r\n        return { user: clientUserData };\r\n      } catch (error) {\r\n        console.log('user.login error: ', error);\r\n\r\n        return {};\r\n      }\r\n    }\r\n  }\r\n};\r\n"],"file":"userResolver.js"}