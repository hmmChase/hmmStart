{"version":3,"sources":["../../../src/graphql/resolvers/userResolver.js"],"names":["Query","user","parent","args","ctx","info","id","AuthenticationError","numId","Number","prisma","findUnique","where","userRecord","clientUserData","console","log","users","findMany","userRecords","clientUsersData","map","currentUser","accessToken","payload","userId","cookieOptions","res","cookie","Mutation","signUp","email","password","UserInputError","input","emailNormalized","trim","toLowerCase","passwordNormalized","foundUser","bcrypt","hash","saltRounds","passwordHashed","create","data","newUserRecord","logIn","logOut","expires","maxAge","clearCookie"],"mappings":"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","sourcesContent":["import { AuthenticationError, UserInputError } from 'apollo-server-express';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nimport { createAccessToken, verifyAccessToken } from '../../utils/accessToken';\r\nimport userClientCleaner from '../../utils/userClientCleaner';\r\nimport {\r\n  isEmailWellFormed,\r\n  isPasswordWellFormed,\r\n  validatePassword\r\n} from '../../utils/validation';\r\nimport { cookieOptions, saltRounds } from '../../config';\r\n\r\nexport default {\r\n  Query: {\r\n    // Return user matching id\r\n    user: async (parent, args, ctx, info) => {\r\n      const { id } = args;\r\n\r\n      // Check if missing args\r\n      if (!id) throw new AuthenticationError('error.missingArgument');\r\n\r\n      // Convert string to number\r\n      const numId = Number(id);\r\n\r\n      // Type check\r\n      if (typeof numId !== 'number')\r\n        throw new AuthenticationError('error.invalidArgument');\r\n\r\n      try {\r\n        // Find user matching userId\r\n        const userRecord = await ctx.prisma.user.findUnique({\r\n          where: { id: numId }\r\n        });\r\n\r\n        // Clean user data for client\r\n        const clientUserData = userClientCleaner(userRecord);\r\n\r\n        // Return user data\r\n        return clientUserData;\r\n      } catch (error) {\r\n        console.log('user.user error: ', error);\r\n\r\n        return {};\r\n      }\r\n    },\r\n\r\n    // Return all users\r\n    users: async (parent, args, ctx, info) => {\r\n      try {\r\n        // Find all users\r\n        const userRecords = await ctx.prisma.user.findMany();\r\n\r\n        // Clean users data for client\r\n        const clientUsersData = userRecords.map(user =>\r\n          userClientCleaner(user)\r\n        );\r\n\r\n        // Return users data\r\n        return clientUsersData;\r\n      } catch (error) {\r\n        console.log('user.users error: ', error);\r\n\r\n        return {};\r\n      }\r\n    },\r\n\r\n    // Return authenticated user\r\n    currentUser: async (parent, args, ctx, info) => {\r\n      // If no access token, return error\r\n      if (!ctx.accessToken)\r\n        return new AuthenticationError('user.invalidCredentials');\r\n\r\n      console.log('ctx.accessToken:', ctx.accessToken);\r\n\r\n      // Verify access token and decode payload\r\n      const payload = verifyAccessToken(ctx.accessToken);\r\n\r\n      console.log('payload:', payload);\r\n\r\n      try {\r\n        // Find user matching userId\r\n        const userRecord = await ctx.prisma.user.findUnique({\r\n          where: { id: payload.userId }\r\n        });\r\n\r\n        console.log('userRecord:', userRecord);\r\n\r\n        // If no user found, return error\r\n        if (!userRecord) return AuthenticationError('user.notFound');\r\n\r\n        // Create new access token\r\n        const accessToken = createAccessToken(userRecord.id);\r\n\r\n        console.log('accessToken:', accessToken);\r\n\r\n        console.log('cookieOptions:', cookieOptions);\r\n\r\n        // Send back new access token\r\n        ctx.res.cookie('at', accessToken, cookieOptions);\r\n\r\n        // Clean user data for client\r\n        const clientUserData = userClientCleaner(userRecord);\r\n\r\n        console.log('clientUserData:', clientUserData);\r\n\r\n        // Return user data\r\n        return clientUserData;\r\n      } catch (error) {\r\n        console.log('user.currentUser error: ', error);\r\n\r\n        return {};\r\n      }\r\n    }\r\n  },\r\n\r\n  Mutation: {\r\n    signUp: async (parent, args, ctx, info) => {\r\n      const { email, password } = args;\r\n      console.log('email:', email);\r\n      console.log('password:', password);\r\n\r\n      // Check if missing args\r\n      if (!(email || password))\r\n        throw new UserInputError('error.missingArgument');\r\n\r\n      // Type check\r\n      for (const input of [email, password])\r\n        if (typeof input !== 'string')\r\n          throw new UserInputError('error.invalidArgument');\r\n\r\n      // Normalize email\r\n      const emailNormalized = email.trim().toLowerCase();\r\n\r\n      console.log('emailNormalized:', emailNormalized);\r\n\r\n      // Normalize password\r\n      const passwordNormalized = email.trim();\r\n\r\n      console.log('passwordNormalized:', passwordNormalized);\r\n\r\n      // Check if email is well-formed\r\n      isEmailWellFormed(emailNormalized);\r\n\r\n      // Check if password is well-formed\r\n      isPasswordWellFormed(passwordNormalized);\r\n\r\n      // Find user matching email\r\n      const foundUser = await ctx.prisma.user.findUnique({\r\n        where: { email: emailNormalized }\r\n      });\r\n\r\n      console.log('foundUser:', foundUser);\r\n\r\n      // If user found, return error\r\n      if (foundUser) throw new UserInputError('email.invalid');\r\n\r\n      // Encrypt password\r\n      const passwordHashed = await bcrypt.hash(passwordNormalized, saltRounds);\r\n\r\n      console.log('passwordHashed:', passwordHashed);\r\n\r\n      try {\r\n        // Create user\r\n        const newUserRecord = await ctx.prisma.user.create({\r\n          data: { email: emailNormalized, password: passwordHashed }\r\n        });\r\n\r\n        console.log('newUserRecord:', newUserRecord);\r\n\r\n        // Create access token\r\n        const accessToken = createAccessToken(newUserRecord.id);\r\n\r\n        console.log('accessToken:', accessToken);\r\n\r\n        // Send back new access token\r\n        ctx.res.cookie('at', accessToken, cookieOptions);\r\n\r\n        console.log('cookieOptions:', cookieOptions);\r\n\r\n        // Clean user data for client\r\n        const clientUserData = userClientCleaner(newUserRecord);\r\n\r\n        console.log('clientUserData:', clientUserData);\r\n\r\n        // Return user data\r\n        return clientUserData;\r\n      } catch (error) {\r\n        console.log('user.signUp error: ', error);\r\n\r\n        return {};\r\n      }\r\n    },\r\n\r\n    logIn: async (parent, args, ctx, info) => {\r\n      const { email, password } = args;\r\n\r\n      console.log('email:', email);\r\n      console.log('password:', password);\r\n\r\n      // Check if missing args\r\n      if (!email || !password)\r\n        throw new AuthenticationError('login.missingCredentials');\r\n\r\n      // Type check\r\n      for (const input of [email, password])\r\n        if (typeof input !== 'string')\r\n          throw new UserInputError('error.invalidArgument');\r\n\r\n      // Normalize email\r\n      const emailNormalized = email.trim().toLowerCase();\r\n\r\n      console.log('emailNormalized:', emailNormalized);\r\n\r\n      // Normalize password\r\n      const passwordNormalized = email.trim();\r\n\r\n      console.log('passwordNormalized:', passwordNormalized);\r\n\r\n      // Check if email is well-formed\r\n      isEmailWellFormed(emailNormalized);\r\n\r\n      // Check if password is well-formed\r\n      isPasswordWellFormed(passwordNormalized);\r\n\r\n      try {\r\n        // Find user matching email\r\n        const userRecord = await ctx.prisma.user.findUnique({\r\n          where: { email }\r\n        });\r\n\r\n        console.log('userRecord:', userRecord);\r\n\r\n        // If user not found, return error\r\n        if (!userRecord)\r\n          throw new AuthenticationError('login.invalidCredentials');\r\n\r\n        // Check if password input matches users password\r\n        validatePassword(password, userRecord.password);\r\n\r\n        // Create access token\r\n        const accessToken = createAccessToken(userRecord.id);\r\n\r\n        console.log('accessToken:', accessToken);\r\n\r\n        console.log('cookieOptions:', cookieOptions);\r\n\r\n        // Send back new access token\r\n        ctx.res.cookie('at', accessToken, cookieOptions);\r\n\r\n        // Clean user data for client\r\n        const clientUserData = userClientCleaner(userRecord);\r\n\r\n        console.log('clientUserData:', clientUserData);\r\n\r\n        // Return user data\r\n        return { user: clientUserData };\r\n      } catch (error) {\r\n        console.log('user.logIn error: ', error);\r\n\r\n        return {};\r\n      }\r\n    },\r\n\r\n    logOut: (parent, args, ctx, info) => {\r\n      // const cookie = serialize('at', '', {\r\n      //   maxAge: -1,\r\n      //   path: '/'\r\n      // });\r\n      // ctx.res.setHeader('Set-Cookie', cookie);\r\n\r\n      delete cookieOptions.expires;\r\n      delete cookieOptions.maxAge;\r\n\r\n      ctx.res.clearCookie('at', cookieOptions);\r\n\r\n      return true;\r\n    }\r\n  }\r\n};\r\n"],"file":"userResolver.js"}