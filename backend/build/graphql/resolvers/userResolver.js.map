{"version":3,"sources":["../../../src/graphql/resolvers/userResolver.js"],"names":["Query","user","parent","args","ctx","info","id","AuthenticationError","numId","Number","prisma","findUnique","where","userRecord","clientUserData","console","log","users","findMany","userRecords","clientUsersData","map","currentUser","accessToken","payload","userId","res","cookie","cookieOptions","Mutation","signUp","email","password","input","UserInputError","emailNormalized","trim","toLowerCase","passwordNormalized","foundUser","error","bcrypt","hash","saltRounds","passwordHashed","create","data","newUserRecord","logIn","logOut","clearCookie"],"mappings":"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","sourcesContent":["import { AuthenticationError } from 'apollo-server-express';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nimport { createAccessToken, verifyAccessToken } from '../../utils/accessToken';\r\nimport userClientCleaner from '../../utils/userClientCleaner';\r\nimport {\r\n  isEmailWellFormed,\r\n  isPasswordWellFormed,\r\n  validatePassword\r\n} from '../../utils/validation';\r\nimport { cookieOptions, saltRounds } from '../../config';\r\n\r\nexport default {\r\n  Query: {\r\n    // Return user matching id\r\n    user: async (parent, args, ctx, info) => {\r\n      const { id } = args;\r\n\r\n      // Check if missing args\r\n      if (!id) throw new AuthenticationError('error.missingArgument');\r\n\r\n      // Convert string to number\r\n      const numId = Number(id);\r\n\r\n      // Type check\r\n      if (typeof numId !== 'number')\r\n        throw new AuthenticationError('error.invalidArgument');\r\n\r\n      try {\r\n        // Find user matching userId\r\n        const userRecord = await ctx.prisma.user.findUnique({\r\n          where: { id: numId }\r\n        });\r\n\r\n        // Clean user data for client\r\n        const clientUserData = userClientCleaner(userRecord);\r\n\r\n        // Return user data\r\n        return clientUserData;\r\n      } catch (error) {\r\n        console.log('user.user error: ', error);\r\n\r\n        return {};\r\n      }\r\n    },\r\n\r\n    // Return all users\r\n    users: async (parent, args, ctx, info) => {\r\n      try {\r\n        // Find all users\r\n        const userRecords = await ctx.prisma.user.findMany();\r\n\r\n        // Clean users data for client\r\n        const clientUsersData = userRecords.map(user =>\r\n          userClientCleaner(user)\r\n        );\r\n\r\n        // Return users data\r\n        return clientUsersData;\r\n      } catch (error) {\r\n        console.log('user.users error: ', error);\r\n\r\n        return {};\r\n      }\r\n    },\r\n\r\n    // Return authenticated user\r\n    currentUser: async (parent, args, ctx, info) => {\r\n      // If no access token, return error\r\n      if (!ctx.accessToken)\r\n        return new AuthenticationError('user.invalidCredentials');\r\n\r\n      // Verify access token and decode payload\r\n      const payload = verifyAccessToken(ctx.accessToken);\r\n\r\n      try {\r\n        // Find user matching userId\r\n        const userRecord = await ctx.prisma.user.findUnique({\r\n          where: { id: payload.userId }\r\n        });\r\n\r\n        // If no user found, return error\r\n        if (!userRecord) return AuthenticationError('user.notFound');\r\n\r\n        // Create new access token\r\n        const accessToken = createAccessToken(userRecord.id);\r\n\r\n        // Send back new access token\r\n        ctx.res.cookie('at', accessToken, cookieOptions);\r\n\r\n        // Clean user data for client\r\n        const clientUserData = userClientCleaner(userRecord);\r\n\r\n        // Return user data\r\n        return clientUserData;\r\n      } catch (error) {\r\n        console.log('user.currentUser error: ', error);\r\n\r\n        return {};\r\n      }\r\n    }\r\n  },\r\n\r\n  Mutation: {\r\n    signUp: async (parent, args, ctx, info) => {\r\n      const { email, password } = args;\r\n\r\n      // Check if missing args\r\n      if (!(email || password))\r\n        throw new AuthenticationError('error.missingArgument');\r\n\r\n      // Type check\r\n      for (const input of [email, password])\r\n        if (typeof input !== 'string')\r\n          throw new UserInputError('error.invalidArgument');\r\n\r\n      // Normalize email\r\n      const emailNormalized = email.trim().toLowerCase();\r\n\r\n      // Normalize password\r\n      const passwordNormalized = email.trim();\r\n\r\n      // Check if email is well-formed\r\n      isEmailWellFormed(emailNormalized);\r\n\r\n      // Check if password is well-formed\r\n      isPasswordWellFormed(passwordNormalized);\r\n\r\n      // Find user matching email\r\n      const foundUser = await ctx.prisma.user.findUnique({\r\n        where: { email: emailNormalized }\r\n      });\r\n\r\n      // If user found, return error\r\n      if (foundUser) throw new AuthenticationError({ error: 'email.invalid' });\r\n\r\n      // Encrypt password\r\n      const passwordHashed = await bcrypt.hash(passwordNormalized, saltRounds);\r\n\r\n      try {\r\n        // Create user\r\n        const newUserRecord = await ctx.prisma.user.create({\r\n          data: { email: emailNormalized, password: passwordHashed }\r\n        });\r\n\r\n        // Create access token\r\n        const accessToken = createAccessToken(newUserRecord.id);\r\n\r\n        // Send back new access token\r\n        ctx.res.cookie('at', accessToken, cookieOptions);\r\n\r\n        // Clean user data for client\r\n        const clientUserData = userClientCleaner(newUserRecord);\r\n\r\n        // Return user data\r\n        return clientUserData;\r\n      } catch (error) {\r\n        console.log('user.signUp error: ', error);\r\n\r\n        return {};\r\n      }\r\n    },\r\n\r\n    logIn: async (parent, args, ctx, info) => {\r\n      const { email, password } = args;\r\n\r\n      // Check if missing args\r\n      if (!email || !password)\r\n        throw new AuthenticationError('login.missingCredentials');\r\n\r\n      // Type check\r\n      for (const input of [email, password])\r\n        if (typeof input !== 'string')\r\n          throw new UserInputError('error.invalidArgument');\r\n\r\n      // Normalize email\r\n      const emailNormalized = email.trim().toLowerCase();\r\n\r\n      // Normalize password\r\n      const passwordNormalized = email.trim();\r\n\r\n      // Check if email is well-formed\r\n      isEmailWellFormed(emailNormalized);\r\n\r\n      // Check if password is well-formed\r\n      isPasswordWellFormed(passwordNormalized);\r\n\r\n      try {\r\n        // Find user matching email\r\n        const userRecord = await ctx.prisma.user.findUnique({\r\n          where: { email }\r\n        });\r\n\r\n        // If user not found, return error\r\n        if (!userRecord)\r\n          throw new AuthenticationError('login.invalidCredentials');\r\n\r\n        // Check if password input matches users password\r\n        validatePassword(password, userRecord.password);\r\n\r\n        // Create access token\r\n        const accessToken = createAccessToken(userRecord.id);\r\n\r\n        // Send back new access token\r\n        ctx.res.cookie('at', accessToken, cookieOptions);\r\n\r\n        // Clean user data for client\r\n        const clientUserData = userClientCleaner(userRecord);\r\n\r\n        // Return user data\r\n        return { user: clientUserData };\r\n      } catch (error) {\r\n        console.log('user.logIn error: ', error);\r\n\r\n        return {};\r\n      }\r\n    },\r\n\r\n    logOut: (parent, args, ctx, info) => {\r\n      // const cookie = serialize('at', '', {\r\n      //   maxAge: -1,\r\n      //   path: '/'\r\n      // });\r\n      // ctx.res.setHeader('Set-Cookie', cookie);\r\n\r\n      ctx.res.clearCookie('at', cookieOptions);\r\n\r\n      return true;\r\n    }\r\n  }\r\n};\r\n"],"file":"userResolver.js"}